<?php

/**
 * Tests for the get_calendar() function.
 *
 * @group general-template
 *
 * @covers ::get_calendar
 */

class GetCalendarTest extends WP_UnitTestCase {
	protected $post_id;

	public function set_up() {
		parent::set_up();
		$this->post_id = self::factory()->post->create();
	}

	/**
	 * Tests that the get_calendar function returns HTML for the calendar of the current month.
	 *
	 * @return void
	 */
	public function testGet_calendar_returns_calendar_html_for_current_month() {
		$current_month_calendar_html = '<caption>' . gmdate( 'F Y' ) . '</caption>';

		$output = get_calendar( true, false );

		$this->assertStringContainsString( $current_month_calendar_html, $output );
	}


	/**
	 * Tests that the get_calendar function returns the calendar HTML correctly when the month value exceeds 12.
	 *
	 * @return void
	 */
	public function testGet_calendar_returns_jan_m_is_more_than_12() {
		global $m;
		$m = 123456;

		$calendar_html = get_calendar( true, false );

		$this->assertStringContainsString( '<caption>January 1234</caption>', $calendar_html );
	}

	/**
	 * Tests that the calendar generated by get_calendar() correctly interprets
	 * the global variable $m as 123409 and ensures September is displayed properly
	 * in the caption as "September 1234".
	 *
	 * @return void
	 */
	public function testGet_calendar_returns_sept_m_is_09() {
		global $m;
		$m = 123409;

		$calendar_html = get_calendar( true, false );

		$this->assertStringContainsString( '<caption>September 1234</caption>', $calendar_html );
	}


	/**
	 * Tests that the calendar generated by get_calendar() starts with Monday
	 * and ends with Sunday when the week starts on Monday.
	 *
	 * @return void
	 */
	public function testGet_calendar_day_of_week_starts_monday() {
		$calendar_html = get_calendar( true, false );

		$this->assertMatchesRegularExpression( '#title="Monday".*title="Sunday"#s', $calendar_html );
	}


	/**
	 * Tests that the calendar generated by get_calendar() function starts the week on Sunday.
	 *
	 * It adds a filter to override the 'start_of_week' option to Sunday (represented by 0),
	 * then asserts that the produced HTML contains the days in the correct order
	 * starting with Sunday.
	 *
	 * @return void
	 */
	public function testGet_calendar_day_of_week_starts_sunday() {

		add_filter(
			'pre_option_start_of_week',
			function () {
				return 0;
			}
		);

		$calendar_html = get_calendar( true, false );

		$this->assertMatchesRegularExpression( '#title="Sunday".*title="Monday"#s', $calendar_html );
	}
}
